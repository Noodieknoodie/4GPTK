################# FRONTEND -- NEW ####################


src\components\client\ClientSearch.jsx
```jsx
import React, { useState, useEffect } from 'react';
import useStore from '../../store';
const ClientSearch = ({ clients = [], isLoading = false }) => {
  const { selectedClientId, setSelectedClientId } = useStore();
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredClients, setFilteredClients] = useState(clients);
  useEffect(() => {
    if (!searchTerm.trim()) {
      setFilteredClients(clients);
      return;
    }
    const lowerSearchTerm = searchTerm.toLowerCase();
    const filtered = clients.filter(client => 
      client.display_name.toLowerCase().includes(lowerSearchTerm) ||
      (client.provider_name && client.provider_name.toLowerCase().includes(lowerSearchTerm))
    );
    setFilteredClients(filtered);
  }, [searchTerm, clients]);
  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };
  const handleClearSearch = () => {
    setSearchTerm('');
  };
  return (
    <div className="relative mb-4">
      <svg
        className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400"
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
      >
        <circle cx="11" cy="11" r="8"></circle>
        <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
      </svg>
      <input
        type="search"
        placeholder="Search clients..."
        className="pl-10 pr-8 bg-gray-50 w-full p-2 rounded-md border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        value={searchTerm}
        onChange={handleSearchChange}
        disabled={isLoading}
      />
      {searchTerm && (
        <button
          className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
          onClick={handleClearSearch}
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
          >
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
          </svg>
        </button>
      )}
      {searchTerm && filteredClients.length > 0 && (
        <div className="absolute left-0 right-0 mt-1 bg-white border border-gray-200 rounded-md shadow-lg z-10 max-h-64 overflow-y-auto">
          {filteredClients.map(client => (
            <button
              key={client.client_id}
              className="w-full text-left px-4 py-2 hover:bg-gray-100 flex items-center"
              onClick={() => {
                setSelectedClientId(client.client_id);
                setSearchTerm('');
              }}
            >
              <span className="mr-2">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  className={
                    client.compliance_status === 'green'
                      ? 'text-green-500'
                      : client.compliance_status === 'yellow'
                        ? 'text-yellow-500'
                        : 'text-red-500'
                  }
                >
                  <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                  <circle cx="12" cy="7" r="4"></circle>
                </svg>
              </span>
              <div className="flex-1">
                <div className="font-medium">{client.display_name}</div>
                {client.provider_name && (
                  <div className="text-xs text-gray-500">{client.provider_name}</div>
                )}
              </div>
            </button>
          ))}
        </div>
      )}
      {searchTerm && filteredClients.length === 0 && (
        <div className="absolute left-0 right-0 mt-1 bg-white border border-gray-200 rounded-md shadow-lg z-10 p-4 text-center text-gray-500">
          No clients found matching "{searchTerm}"
        </div>
      )}
    </div>
  );
};
export default ClientSearch;
```

src\components\layout\Header.jsx
```jsx
import React from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';
const Header = () => {
  const router = useRouter();
  const navItems = [
    { title: 'PAYMENTS', path: '/payments', active: true },
    { title: 'SUMMARY', path: '/summary', active: false },
    { title: 'CONTACTS', path: '/contacts', active: false },
    { title: 'CONTRACTS', path: '/contracts', active: false },
    { title: 'EXPORT DATA', path: '/export', active: false },
  ];
  return (
    <header className="border-b border-gray-200 bg-white">
      <div className="flex h-16 items-center justify-between px-6">
        <div className="flex items-center">
          <h1 className="text-xl font-semibold text-gray-800 mr-8">InvestTrack</h1>
          <nav className="hidden md:flex space-x-1">
            {navItems.map((item) => (
              <Link 
                key={item.path} 
                href={item.path}
                className={`${
                  router.pathname === item.path 
                    ? 'bg-blue-600 text-white' 
                    : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
                } rounded-none px-4 py-2 h-16 flex items-center`}
              >
                {item.title}
              </Link>
            ))}
          </nav>
        </div>
        <div className="flex items-center space-x-4">
          <button className="flex items-center gap-2 p-2 text-gray-500">
            <span className="hidden sm:inline-block text-sm font-medium">Admin User</span>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <polyline points="6 9 12 15 18 9"></polyline>
            </svg>
          </button>
        </div>
      </div>
      <div className="md:hidden overflow-x-auto">
        <nav className="flex">
          {navItems.map((item) => (
            <Link
              key={item.path}
              href={item.path}
              className={`${
                router.pathname === item.path
                  ? 'border-b-2 border-blue-600 text-blue-600'
                  : 'text-gray-600'
              } px-4 py-2`}
            >
              {item.title}
            </Link>
          ))}
        </nav>
      </div>
    </header>
  );
};
export default Header;
```

src\components\layout\PageLayout.jsx
```jsx
import React from 'react';
import Header from './Header';
import Sidebar from './Sidebar';
import DocumentViewer from '../payment/DocumentViewer';
import useStore from '../../store';
const PageLayout = ({ children, clients = [], isLoading = false }) => {
  const { documentViewerOpen } = useStore();
  return (
    <div className="flex flex-col min-h-screen bg-gray-50">
      <Header />
      <div className="flex flex-1 overflow-hidden">
        <Sidebar clients={clients} isLoading={isLoading} />
        <div className="flex flex-1 overflow-hidden">
          <div className={`flex-1 overflow-auto p-6 ${documentViewerOpen ? 'w-3/5' : 'w-full'}`}>
            {children}
          </div>
          <DocumentViewer />
        </div>
      </div>
    </div>
  );
};
export default PageLayout;
```

src\components\layout\Sidebar.jsx
```jsx
import React, { useState } from 'react';
import useStore from '../../store';
import ClientSearch from '../client/ClientSearch';
const Sidebar = ({ clients = [], isLoading = false }) => {
  const { selectedClientId, setSelectedClientId } = useStore();
  const [showByProvider, setShowByProvider] = useState(false);
  const groupClientsByProvider = () => {
    if (!showByProvider) {
      return [['All', clients]];
    }
    return Object.entries(
      clients.reduce((acc, client) => {
        const provider = client.provider_name || 'No Provider';
        if (!acc[provider]) acc[provider] = [];
        acc[provider].push(client);
        return acc;
      }, {})
    ).sort((a, b) => a[0].localeCompare(b[0]));
  };
  const groupedClients = groupClientsByProvider();
  if (isLoading) {
    return (
      <div className="w-80 border-r border-gray-200 bg-white flex flex-col h-full">
        <div className="p-4 border-b border-gray-200">
          <h2 className="text-xl font-semibold text-gray-800 mb-4">Clients</h2>
          <div className="animate-pulse space-y-4">
            <div className="h-10 bg-gray-200 rounded"></div>
            <div className="h-6 bg-gray-200 rounded w-2/3"></div>
          </div>
        </div>
        <div className="p-2 flex-1 overflow-auto">
          <div className="animate-pulse space-y-3">
            {[...Array(5)].map((_, i) => (
              <div key={i} className="h-10 bg-gray-200 rounded"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }
  return (
    <div className="w-80 border-r border-gray-200 bg-white flex flex-col h-full">
      <div className="p-4 border-b border-gray-200">
        <h2 className="text-xl font-semibold text-gray-800 mb-4">Clients</h2>
        <ClientSearch clients={clients} isLoading={isLoading} />
        <div className="flex items-center justify-between">
          <span className="text-sm font-medium text-gray-700">View by Provider</span>
          <button 
            className={`h-5 w-10 rounded-full relative ${showByProvider ? 'bg-blue-600' : 'bg-gray-200'}`}
            onClick={() => setShowByProvider(!showByProvider)}
          >
            <div 
              className={`absolute w-3 h-3 rounded-full bg-white top-1 transition-all ${
                showByProvider ? 'right-1' : 'left-1'
              }`}
            ></div>
          </button>
        </div>
      </div>
      <div className="p-2 flex-1 overflow-auto">
        {groupedClients.map(([provider, providerClients]) => (
          <div key={provider} className="mb-2">
            {showByProvider && (
              <div className="px-3 py-2 text-xs font-semibold text-gray-600 bg-gray-50 rounded-md mb-1">
                {provider}
              </div>
            )}
            {providerClients.map(client => (
              <button
                key={client.client_id}
                className={`w-full justify-start py-2 px-3 mb-1 text-left rounded transition-colors ${
                  selectedClientId === client.client_id 
                    ? 'bg-gray-100 text-gray-900' 
                    : 'text-gray-700 hover:bg-gray-50'
                }`}
                onClick={() => setSelectedClientId(client.client_id)}
              >
                <div className="flex items-center w-full">
                  <span className="mr-3">
                    <svg 
                      xmlns="http://www.w3.org/2000/svg" 
                      width="16" 
                      height="16" 
                      viewBox="0 0 24 24" 
                      fill="none" 
                      stroke="currentColor" 
                      strokeWidth="2" 
                      strokeLinecap="round" 
                      strokeLinejoin="round" 
                      className={
                        client.compliance_status === 'green' 
                          ? 'text-green-500' 
                          : client.compliance_status === 'yellow' 
                            ? 'text-yellow-500' 
                            : 'text-red-500'
                      }
                    >
                      <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                      <circle cx="12" cy="7" r="4"></circle>
                    </svg>
                  </span>
                  <span className="truncate flex-grow">{client.display_name}</span>
                </div>
              </button>
            ))}
          </div>
        ))}
        {clients.length === 0 && (
          <div className="p-4 text-center text-gray-500">
            No clients available
          </div>
        )}
      </div>
    </div>
  );
};
export default Sidebar;
```

src\components\payment\ClientDashboard.jsx
```jsx
import React from 'react';
import ContractCard from './ContractCard';
import PaymentInfoCard from './PaymentInfoCard';
import ComplianceCard from './ComplianceCard';
import { useClient, useClientContract, useClientSummary } from '../../hooks/useClientData';
const ClientDashboard = ({ clientId }) => {
  const {
    data: client,
    isLoading: isClientLoading,
    error: clientError,
  } = useClient(clientId);
  const {
    data: contract,
    isLoading: isContractLoading,
    error: contractError,
  } = useClientContract(clientId);
  const {
    data: summary,
    isLoading: isSummaryLoading,
    error: summaryError,
  } = useClientSummary(clientId);
  const isLoading = isClientLoading || isContractLoading || isSummaryLoading;
  const error = clientError || contractError || summaryError;
  if (error) {
    return (
      <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
        Error loading client information: {error.message}
      </div>
    );
  }
  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <ContractCard 
          contract={contract} 
          isLoading={isContractLoading} 
        />
        <PaymentInfoCard 
          client={client}
          contract={contract}
          metrics={summary?.metrics}
          isLoading={isLoading}
        />
        <ComplianceCard 
          client={client}
          contract={contract}
          isLoading={isLoading}
        />
      </div>
    </div>
  );
};
export default ClientDashboard;
```

src\components\payment\ComplianceCard.jsx
```jsx
import React from 'react';
import Card from '../ui/Card';
import { formatCurrency } from '../../lib/feeUtils';
import { generateFeeReferences } from '../../lib/feeUtils';
const ComplianceCard = ({ client, contract, isLoading }) => {
  if (isLoading) {
    return (
      <Card title="Compliance Status">
        <div className="animate-pulse flex flex-col md:flex-row gap-4">
          <div className="flex-1">
            <div className="h-10 bg-gray-200 rounded w-2/3 mb-4"></div>
            <div className="space-y-3">
              <div className="h-4 bg-gray-200 rounded"></div>
              <div className="h-4 bg-gray-200 rounded"></div>
            </div>
          </div>
          <div className="md:w-2/5">
            <div className="h-20 bg-gray-200 rounded"></div>
          </div>
        </div>
      </Card>
    );
  }
  const status = client?.compliance_status || 'red';
  const reason = client?.compliance_reason || 'No compliance data available';
  const StatusIcon = () => {
    if (status === 'green') {
      return (
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-green-500">
          <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
          <polyline points="22 4 12 14.01 9 11.01"></polyline>
        </svg>
      );
    }
    if (status === 'yellow') {
      return (
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-yellow-500">
          <circle cx="12" cy="12" r="10"></circle>
          <line x1="12" y1="8" x2="12" y2="12"></line>
          <line x1="12" y1="16" x2="12.01" y2="16"></line>
        </svg>
      );
    }
    return (
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-red-500">
        <circle cx="12" cy="12" r="10"></circle>
        <line x1="12" y1="8" x2="12" y2="12"></line>
        <line x1="12" y1="16" x2="12.01" y2="16"></line>
      </svg>
    );
  };
  const getStatusText = () => {
    if (status === 'green') return 'Compliant';
    if (status === 'yellow') return 'Attention Needed';
    return 'Non-Compliant';
  };
  const getStatusColor = () => {
    if (status === 'green') return 'text-green-700';
    if (status === 'yellow') return 'text-yellow-700';
    return 'text-red-700';
  };
  const feeReferences = contract ? generateFeeReferences(contract) : null;
  return (
    <Card>
      <div className="pb-2">
        <h3 className="text-sm font-bold text-gray-800">Compliance Status</h3>
      </div>
      <div className="flex flex-col md:flex-row gap-4">
        <div className="flex-1">
          <div className="flex items-center gap-3 mb-4">
            <StatusIcon />
            <span className={`font-medium ${getStatusColor()}`}>
              {getStatusText()}
            </span>
          </div>
          <div className="grid grid-cols-1 gap-3">
            {contract && (
              <div className="flex items-center gap-2">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-gray-400">
                  <circle cx="12" cy="12" r="10"></circle>
                  <polyline points="12 6 12 12 16 14"></polyline>
                </svg>
                <span className="text-sm text-gray-600">
                  {contract.payment_schedule === 'monthly' ? 'Monthly' : 'Quarterly'} payment schedule
                </span>
              </div>
            )}
            {contract && (
              <div className="flex items-center gap-2">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-gray-400">
                  <rect x="1" y="4" width="22" height="16" rx="2" ry="2"></rect>
                  <line x1="1" y1="10" x2="23" y2="10"></line>
                </svg>
                <span className="text-sm text-gray-600">
                  {contract.fee_type === 'flat' 
                    ? `Flat fee of ${formatCurrency(contract.flat_rate)}`
                    : `Percentage fee of ${(contract.percent_rate * 100).toFixed(4)}%`}
                </span>
              </div>
            )}
          </div>
        </div>
        {feeReferences && (
          <div className="md:w-2/5">
            <div className="bg-gray-50 rounded-md p-3">
              <h4 className="text-xs font-medium text-gray-500 mb-2">Fee Reference</h4>
              <div className="grid grid-cols-1 gap-2 text-xs">
                <div>
                  <span className="text-gray-500">Monthly:</span>
                  <span className="font-medium ml-1">{feeReferences.monthly}</span>
                </div>
                <div>
                  <span className="text-gray-500">Quarterly:</span>
                  <span className="font-medium ml-1">{feeReferences.quarterly}</span>
                </div>
                <div>
                  <span className="text-gray-500">Annually:</span>
                  <span className="font-medium ml-1">{feeReferences.annual}</span>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </Card>
  );
};
export default ComplianceCard;
```

src\components\payment\ContractCard.jsx
```jsx
import React from 'react';
import Card from '../ui/Card';
import { formatCurrency } from '../../lib/feeUtils';
const ContractCard = ({ contract, isLoading }) => {
  if (isLoading) {
    return (
      <Card title="Contract Details">
        <div className="animate-pulse">
          <div className="grid grid-cols-1 gap-2">
            {[1, 2, 3, 4, 5].map((i) => (
              <div key={i} className="flex justify-between py-1">
                <div className="h-4 bg-gray-200 rounded w-1/3"></div>
                <div className="h-4 bg-gray-200 rounded w-1/3"></div>
              </div>
            ))}
          </div>
        </div>
      </Card>
    );
  }
  if (!contract) {
    return (
      <Card title="Contract Details">
        <div className="py-6 text-center text-gray-500">
          No contract information available
        </div>
      </Card>
    );
  }
  const details = [
    {
      label: 'Contract Number',
      value: contract.contract_number || 'N/A',
    },
    {
      label: 'Plan Provider',
      value: contract.provider_name,
    },
    {
      label: 'Payment Frequency',
      value: contract.payment_schedule === 'monthly' ? 'Monthly' : 'Quarterly',
    },
    {
      label: 'Fee Structure',
      value: contract.fee_type === 'flat' ? 'Flat Rate' : 'Percentage of AUM',
    },
    {
      label: 'Fee Amount',
      value:
        contract.fee_type === 'flat'
          ? formatCurrency(contract.flat_rate)
          : `${(contract.percent_rate * 100).toFixed(4)}%`,
    },
  ];
  return (
    <Card>
      <div className="pb-2">
        <h3 className="text-sm font-bold text-gray-800">Contract Details</h3>
      </div>
      <dl className="grid grid-cols-1 gap-1 text-sm">
        {details.map((item, idx) => (
          <div key={idx} className="flex justify-between py-1">
            <dt className="text-gray-500">{item.label}</dt>
            <dd className="font-medium text-gray-900">{item.value}</dd>
          </div>
        ))}
      </dl>
    </Card>
  );
};
export default ContractCard;
```

src\components\payment\DocumentViewer.jsx
```jsx
import React from 'react';
import useStore from '../../store';
const DocumentViewer = () => {
  const { documentViewerOpen, setDocumentViewerOpen, selectedDocumentUrl } = useStore();
  if (!documentViewerOpen) {
    return null;
  }
  return (
    <div className="w-2/5 border-l border-gray-200 bg-white flex flex-col h-full">
      <div className="flex items-center justify-between p-4 border-b border-gray-200">
        <h2 className="text-lg font-medium text-gray-800">Document Preview</h2>
        <div className="flex items-center space-x-2">
          <button 
            className="w-8 h-8 flex items-center justify-center rounded-md hover:bg-gray-100"
            title="Close"
            onClick={() => setDocumentViewerOpen(false)}
          >
            <svg 
              xmlns="http://www.w3.org/2000/svg" 
              width="16" 
              height="16" 
              viewBox="0 0 24 24" 
              fill="none" 
              stroke="currentColor" 
              strokeWidth="2" 
              strokeLinecap="round" 
              strokeLinejoin="round"
            >
              <line x1="18" y1="6" x2="6" y2="18"></line>
              <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
          </button>
        </div>
      </div>
      <div className="flex-grow p-4">
        <div className="bg-gray-100 rounded-md p-4 h-full flex items-center justify-center">
          <div className="text-center">
            <svg 
              xmlns="http://www.w3.org/2000/svg" 
              width="64" 
              height="64" 
              viewBox="0 0 24 24" 
              fill="none" 
              stroke="currentColor" 
              strokeWidth="2" 
              strokeLinecap="round" 
              strokeLinejoin="round" 
              className="mx-auto mb-4 text-gray-400"
            >
              <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
              <polyline points="14 2 14 8 20 8"></polyline>
              <line x1="16" y1="13" x2="8" y2="13"></line>
              <line x1="16" y1="17" x2="8" y2="17"></line>
              <polyline points="10 9 9 9 8 9"></polyline>
            </svg>
            <p className="text-sm text-gray-500 mb-4">Document viewer functionality will be implemented in a future update</p>
            <p className="text-xs text-gray-400 mb-4">This component will display client payment documentation</p>
          </div>
        </div>
      </div>
    </div>
  );
};
export default DocumentViewer;
```

src\components\payment\PaymentForm.jsx
```jsx
import React, { useState, useEffect } from 'react';
import Card from '../ui/Card';
import Input from '../ui/Input';
import Select from '../ui/Select';
import DatePicker from '../ui/DatePicker';
import Button from '../ui/Button';
import { useCreatePayment, useUpdatePayment, useAvailablePeriods } from '../../hooks/usePaymentData';
import { useClientContract } from '../../hooks/useClientData';
import { formatCurrency } from '../../lib/feeUtils';
import useStore from '../../store';
const PaymentForm = ({ clientId }) => {
  const { editingPayment, clearEditingPayment } = useStore();
  const { data: contract, isLoading: isContractLoading } = useClientContract(clientId);
  const { data: periodsData, isLoading: isPeriodsLoading } = useAvailablePeriods(
    contract?.contract_id, 
    clientId
  );
  const createPaymentMutation = useCreatePayment();
  const updatePaymentMutation = useUpdatePayment();
  const [formValues, setFormValues] = useState({
    received_date: new Date().toISOString().split('T')[0],
    total_assets: '',
    actual_fee: '',
    expected_fee: '',
    method: '',
    notes: '',
    is_split_payment: false,
    start_period: '',
    end_period: '',
  });
  const [formErrors, setFormErrors] = useState({});
  const [showAdvanced, setShowAdvanced] = useState(false);
  useEffect(() => {
    if (clientId && !editingPayment) {
      setFormValues({
        received_date: new Date().toISOString().split('T')[0],
        total_assets: '',
        actual_fee: '',
        expected_fee: '',
        method: '',
        notes: '',
        is_split_payment: false,
        start_period: '',
        end_period: '',
      });
      setFormErrors({});
    }
  }, [clientId]);
  useEffect(() => {
    if (editingPayment) {
      const isMonthly = editingPayment.applied_start_month !== null;
      const startPeriod = isMonthly
        ? `${editingPayment.applied_start_month}-${editingPayment.applied_start_month_year}`
        : `${editingPayment.applied_start_quarter}-${editingPayment.applied_start_quarter_year}`;
      const endPeriod = isMonthly
        ? `${editingPayment.applied_end_month}-${editingPayment.applied_end_month_year}`
        : `${editingPayment.applied_end_quarter}-${editingPayment.applied_end_quarter_year}`;
      const isSplit = isMonthly
        ? (editingPayment.applied_start_month !== editingPayment.applied_end_month || 
           editingPayment.applied_start_month_year !== editingPayment.applied_end_month_year)
        : (editingPayment.applied_start_quarter !== editingPayment.applied_end_quarter || 
           editingPayment.applied_start_quarter_year !== editingPayment.applied_end_quarter_year);
      setFormValues({
        received_date: editingPayment.received_date,
        total_assets: editingPayment.total_assets?.toString() || '',
        actual_fee: editingPayment.actual_fee?.toString() || '',
        expected_fee: editingPayment.expected_fee?.toString() || '',
        method: editingPayment.method || '',
        notes: editingPayment.notes || '',
        is_split_payment: isSplit,
        start_period: startPeriod,
        end_period: endPeriod,
      });
      setShowAdvanced(true);
    }
  }, [editingPayment]);
  useEffect(() => {
    if (contract && formValues.total_assets && contract.fee_type === 'percentage') {
      const assets = parseFloat(formValues.total_assets);
      if (!isNaN(assets) && contract.percent_rate) {
        const expected = assets * contract.percent_rate;
        setFormValues(prev => ({
          ...prev,
          expected_fee: expected.toFixed(2)
        }));
      }
    } else if (contract && contract.fee_type === 'flat' && contract.flat_rate) {
      setFormValues(prev => ({
        ...prev,
        expected_fee: contract.flat_rate.toFixed(2)
      }));
    }
  }, [contract, formValues.total_assets]);
  const handleInputChange = (field, value) => {
    setFormValues(prev => ({
      ...prev,
      [field]: value
    }));
    if (formErrors[field]) {
      setFormErrors(prev => ({
        ...prev,
        [field]: null
      }));
    }
  };
  const handleSplitToggle = () => {
    setFormValues(prev => ({
      ...prev,
      is_split_payment: !prev.is_split_payment,
      end_period: !prev.is_split_payment ? prev.start_period : ''
    }));
  };
  const handleSubmit = (e) => {
    e.preventDefault();
    const errors = {};
    if (!formValues.received_date) {
      errors.received_date = 'Received date is required';
    }
    if (!formValues.actual_fee) {
      errors.actual_fee = 'Payment amount is required';
    } else if (isNaN(parseFloat(formValues.actual_fee))) {
      errors.actual_fee = 'Payment amount must be a number';
    }
    if (!formValues.start_period) {
      errors.start_period = 'Applied period is required';
    }
    if (formValues.is_split_payment && !formValues.end_period) {
      errors.end_period = 'End period is required for split payments';
    }
    if (Object.keys(errors).length > 0) {
      setFormErrors(errors);
      return;
    }
    const paymentData = {
      contract_id: contract.contract_id,
      client_id: clientId,
      received_date: formValues.received_date,
      total_assets: formValues.total_assets ? parseFloat(formValues.total_assets) : null,
      expected_fee: formValues.expected_fee ? parseFloat(formValues.expected_fee) : null,
      actual_fee: parseFloat(formValues.actual_fee),
      method: formValues.method || null,
      notes: formValues.notes || null,
    };
    const isMonthly = contract.payment_schedule === 'monthly';
    const startPeriodParts = formValues.start_period.split('-');
    if (isMonthly) {
      paymentData.applied_start_month = parseInt(startPeriodParts[0], 10);
      paymentData.applied_start_month_year = parseInt(startPeriodParts[1], 10);
      if (formValues.is_split_payment) {
        const endPeriodParts = formValues.end_period.split('-');
        paymentData.applied_end_month = parseInt(endPeriodParts[0], 10);
        paymentData.applied_end_month_year = parseInt(endPeriodParts[1], 10);
      } else {
        paymentData.applied_end_month = paymentData.applied_start_month;
        paymentData.applied_end_month_year = paymentData.applied_start_month_year;
      }
    } else {
      paymentData.applied_start_quarter = parseInt(startPeriodParts[0], 10);
      paymentData.applied_start_quarter_year = parseInt(startPeriodParts[1], 10);
      if (formValues.is_split_payment) {
        const endPeriodParts = formValues.end_period.split('-');
        paymentData.applied_end_quarter = parseInt(endPeriodParts[0], 10);
        paymentData.applied_end_quarter_year = parseInt(endPeriodParts[1], 10);
      } else {
        paymentData.applied_end_quarter = paymentData.applied_start_quarter;
        paymentData.applied_end_quarter_year = paymentData.applied_start_quarter_year;
      }
    }
    if (editingPayment) {
      updatePaymentMutation.mutate(
        { id: editingPayment.payment_id, data: paymentData },
        {
          onSuccess: () => {
            handleReset();
          },
        }
      );
    } else {
      createPaymentMutation.mutate(paymentData, {
        onSuccess: () => {
          handleReset();
        },
      });
    }
  };
  const handleReset = () => {
    setFormValues({
      received_date: new Date().toISOString().split('T')[0],
      total_assets: '',
      actual_fee: '',
      expected_fee: '',
      method: '',
      notes: '',
      is_split_payment: false,
      start_period: '',
      end_period: '',
    });
    setFormErrors({});
    clearEditingPayment();
  };
  const formatPeriodOptions = () => {
    if (!periodsData?.periods) return [];
    return periodsData.periods.map(period => ({
      label: period.label,
      value: period.value
    }));
  };
  const methodOptions = [
    { label: 'Auto - ACH', value: 'Auto - ACH' },
    { label: 'Auto - Check', value: 'Auto - Check' },
    { label: 'Invoice - Check', value: 'Invoice - Check' },
    { label: 'Wire Transfer', value: 'Wire Transfer' },
    { label: 'Check', value: 'Check' },
  ];
  const isDisabled = !clientId || !contract;
  const periodOptions = formatPeriodOptions();
  const isSubmitting = createPaymentMutation.isLoading || updatePaymentMutation.isLoading;
  return (
    <Card title={editingPayment ? "Edit Payment" : "Add Payment"}>
      <form onSubmit={handleSubmit} className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-5">
          <DatePicker
            label="Received Date"
            value={formValues.received_date}
            onChange={(value) => handleInputChange('received_date', value)}
            required
            disabled={isDisabled}
            error={formErrors.received_date}
          />
          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <label className="text-sm font-medium">Applied Period</label>
              <div className="flex items-center space-x-2">
                <span className="text-sm text-gray-500">Single</span>
                <button
                  type="button"
                  className={`h-5 w-10 rounded-full relative ${
                    formValues.is_split_payment ? 'bg-blue-600' : 'bg-gray-200'
                  }`}
                  onClick={handleSplitToggle}
                  disabled={isDisabled}
                >
                  <div
                    className={`absolute w-3 h-3 rounded-full bg-white top-1 transition-transform ${
                      formValues.is_split_payment ? 'translate-x-5' : 'translate-x-1'
                    }`}
                  ></div>
                </button>
                <span className="text-sm text-gray-500">Split</span>
              </div>
            </div>
            <div className={`flex ${formValues.is_split_payment ? 'space-x-2' : ''}`}>
              <Select
                options={periodOptions}
                value={formValues.start_period}
                onChange={(value) => handleInputChange('start_period', value)}
                placeholder="Select period"
                disabled={isDisabled || isPeriodsLoading}
                required
                error={formErrors.start_period}
              />
              {formValues.is_split_payment && (
                <Select
                  options={periodOptions}
                  value={formValues.end_period}
                  onChange={(value) => handleInputChange('end_period', value)}
                  placeholder="End period"
                  disabled={isDisabled || isPeriodsLoading}
                  required
                  error={formErrors.end_period}
                />
              )}
            </div>
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-5">
          <Input
            label="Assets Under Management"
            type="text"
            value={formValues.total_assets}
            onChange={(value) => handleInputChange('total_assets', value)}
            placeholder="Enter AUM (optional)"
            prefix="$"
            disabled={isDisabled}
          />
          <Input
            label="Payment Amount"
            type="text"
            value={formValues.actual_fee}
            onChange={(value) => handleInputChange('actual_fee', value)}
            placeholder="Enter payment amount"
            prefix="$"
            required
            disabled={isDisabled}
            error={formErrors.actual_fee}
          />
          <Select
            label="Payment Method"
            options={methodOptions}
            value={formValues.method}
            onChange={(value) => handleInputChange('method', value)}
            placeholder="Select method (optional)"
            disabled={isDisabled}
          />
        </div>
        <div>
          <button
            type="button"
            className="flex items-center text-sm font-medium text-gray-700 mb-2"
            onClick={() => setShowAdvanced(!showAdvanced)}
            disabled={isDisabled}
          >
            Notes & Attachments
            <svg
              className={`ml-2 h-4 w-4 transition-transform ${
                showAdvanced ? 'rotate-180' : ''
              }`}
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            >
              <polyline points="6 9 12 15 18 9"></polyline>
            </svg>
          </button>
          {showAdvanced && (
            <div className="space-y-3 p-3 bg-gray-50 rounded-md">
              <Input
                label="Notes"
                type="text"
                value={formValues.notes}
                onChange={(value) => handleInputChange('notes', value)}
                placeholder="Enter any notes about this payment"
                disabled={isDisabled}
              />
              <div className="mt-2">
                <p className="text-sm text-gray-500 mb-2">Attachments</p>
                <p className="text-xs text-gray-400">
                  File upload functionality will be implemented in a future update.
                </p>
              </div>
              {contract?.fee_type === 'percentage' && formValues.total_assets && (
                <div className="p-2 bg-blue-50 rounded text-sm">
                  <div className="font-medium text-blue-800">Expected Fee:</div>
                  <div className="text-blue-600">
                    {formValues.expected_fee
                      ? formatCurrency(parseFloat(formValues.expected_fee))
                      : 'N/A'}
                  </div>
                  <div className="text-xs text-blue-500 mt-1">
                    Based on {contract.percent_rate * 100}% of{' '}
                    {formatCurrency(parseFloat(formValues.total_assets))}
                  </div>
                </div>
              )}
              {contract?.fee_type === 'flat' && (
                <div className="p-2 bg-blue-50 rounded text-sm">
                  <div className="font-medium text-blue-800">Expected Fee:</div>
                  <div className="text-blue-600">
                    {formatCurrency(contract.flat_rate)}
                  </div>
                  <div className="text-xs text-blue-500 mt-1">
                    Flat fee as specified in contract
                  </div>
                </div>
              )}
            </div>
          )}
        </div>
        {(createPaymentMutation.isError || updatePaymentMutation.isError) && (
          <div className="bg-red-50 text-red-700 p-3 rounded-md text-sm">
            Error: {createPaymentMutation.error?.message || updatePaymentMutation.error?.message}
          </div>
        )}
        <div className="flex justify-end space-x-3">
          <Button
            variant="secondary"
            type="button"
            onClick={handleReset}
            disabled={isDisabled || isSubmitting}
          >
            {editingPayment ? 'Cancel' : 'Clear'}
          </Button>
          <Button
            type="submit"
            disabled={isDisabled || isSubmitting}
          >
            {isSubmitting ? 'Submitting...' : (editingPayment ? 'Update' : 'Submit')}
          </Button>
        </div>
      </form>
    </Card>
  );
};
export default PaymentForm;
```

src\components\payment\PaymentHistory.jsx
```jsx
import React, { useState } from 'react';
import { usePaymentHistory, useDeletePayment } from '../../hooks/usePaymentData';
import { formatDate } from '../../lib/dateUtils';
import { formatCurrency } from '../../lib/feeUtils';
import StatusBadge from '../ui/StatusBadge';
import Button from '../ui/Button';
import useStore from '../../store';
const PaymentHistory = ({ clientId }) => {
  const [page, setPage] = useState(1);
  const [year, setYear] = useState(null);
  const [expandedPaymentId, setExpandedPaymentId] = useState(null);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(null);
  const { setEditingPayment } = useStore();
  const { 
    data: payments = [], 
    isLoading,
    error,
    isPreviousData,
  } = usePaymentHistory(clientId, { page, limit: 10, year });
  const deletePaymentMutation = useDeletePayment();
  if (error) {
    return (
      <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
        Error loading payment history: {error.message}
      </div>
    );
  }
  const toggleExpandRow = (paymentId) => {
    setExpandedPaymentId(expandedPaymentId === paymentId ? null : paymentId);
  };
  const handleEdit = (payment) => {
    setEditingPayment(payment);
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };
  const handleDelete = (paymentId) => {
    deletePaymentMutation.mutate({ id: paymentId, clientId });
    setShowDeleteConfirm(null);
  };
  const currentYear = new Date().getFullYear();
  const availableYears = [];
  for (let y = currentYear; y >= currentYear - 5; y--) {
    availableYears.push(y);
  }
  return (
    <div>
      <div className="flex items-center justify-between mb-4">
        <h2 className="text-xl font-semibold text-gray-800">Payment History</h2>
        <div className="flex items-center space-x-2">
          <label className="text-sm text-gray-600">Filter by Year:</label>
          <select
            className="border border-gray-200 rounded-md text-sm p-1"
            value={year || ''}
            onChange={(e) => {
              setYear(e.target.value ? Number(e.target.value) : null);
              setPage(1);
            }}
          >
            <option value="">All Years</option>
            {availableYears.map((y) => (
              <option key={y} value={y}>
                {y}
              </option>
            ))}
          </select>
        </div>
      </div>
      <div className="bg-white rounded-md border border-gray-200 overflow-hidden">
        {isLoading ? (
          <div className="p-4 text-center text-gray-500">Loading payment history...</div>
        ) : payments.length === 0 ? (
          <div className="p-4 text-center text-gray-500">No payment records found.</div>
        ) : (
          <div className="overflow-x-auto">
            <table className="min-w-full">
              <thead className="bg-gray-50">
                <tr>
                  <th className="w-8 px-2 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"></th>
                  <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Received Date</th>
                  <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Provider</th>
                  <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Applied Period</th>
                  <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">AUM</th>
                  <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Expected Fee</th>
                  <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Amount</th>
                  <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Variance</th>
                  <th className="px-3 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {payments.map((payment, index) => (
                  <React.Fragment key={payment.payment_id}>
                    <tr className={index % 2 === 0 ? 'bg-gray-50' : ''}>
                      <td className="px-2 py-4">
                        {payment.is_split_payment && (
                          <button
                            className="w-6 h-6 flex items-center justify-center"
                            onClick={() => toggleExpandRow(payment.payment_id)}
                            aria-label="Toggle payment details"
                          >
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              width="16"
                              height="16"
                              viewBox="0 0 24 24"
                              fill="none"
                              stroke="currentColor"
                              strokeWidth="2"
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              className={`transition-transform ${
                                expandedPaymentId === payment.payment_id ? 'rotate-90' : ''
                              }`}
                            >
                              <polyline points="9 18 15 12 9 6"></polyline>
                            </svg>
                          </button>
                        )}
                      </td>
                      <td className="px-3 py-4 whitespace-nowrap text-sm text-gray-800">
                        {formatDate(payment.received_date)}
                      </td>
                      <td className="px-3 py-4 whitespace-nowrap text-sm text-gray-800">
                        {payment.provider_name || 'N/A'}
                      </td>
                      <td className="px-3 py-4 whitespace-nowrap text-sm text-gray-800">
                        {payment.is_split_payment ? (
                          <div className="flex items-center">
                            <StatusBadge label="Split" status="blue" />
                            <span className="ml-2 text-gray-500">
                              {payment.periods?.length || 0} periods
                            </span>
                          </div>
                        ) : (
                          formatAppliedPeriod(payment)
                        )}
                      </td>
                      <td className="px-3 py-4 whitespace-nowrap text-sm text-gray-800">
                        {payment.total_assets
                          ? formatCurrency(payment.total_assets)
                          : 'N/A'}
                      </td>
                      <td className="px-3 py-4 whitespace-nowrap text-sm text-gray-800">
                        {payment.expected_fee
                          ? formatCurrency(payment.expected_fee)
                          : 'N/A'}
                      </td>
                      <td className="px-3 py-4 whitespace-nowrap text-sm text-gray-800 font-medium">
                        {formatCurrency(payment.actual_fee)}
                      </td>
                      <td className="px-3 py-4 whitespace-nowrap">
                        {payment.variance?.status && (
                          <StatusBadge
                            label={payment.variance.message}
                            status={payment.variance.status}
                          />
                        )}
                      </td>
                      <td className="px-3 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <div className="relative">
                          <button
                            className="text-gray-500 hover:text-gray-700"
                            onClick={() => setShowDeleteConfirm(payment.payment_id)}
                          >
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              width="16"
                              height="16"
                              viewBox="0 0 24 24"
                              fill="none"
                              stroke="currentColor"
                              strokeWidth="2"
                              strokeLinecap="round"
                              strokeLinejoin="round"
                            >
                              <circle cx="12" cy="12" r="1"></circle>
                              <circle cx="19" cy="12" r="1"></circle>
                              <circle cx="5" cy="12" r="1"></circle>
                            </svg>
                          </button>
                          {showDeleteConfirm === payment.payment_id && (
                            <div className="absolute right-0 top-0 mt-6 w-48 bg-white rounded-md shadow-lg border border-gray-200 z-10">
                              <div className="p-2 border-b border-gray-100">
                                <div className="flex space-x-1">
                                  <button
                                    className="flex-1 px-2 py-1 text-xs bg-blue-50 text-blue-600 hover:bg-blue-100 rounded"
                                    onClick={() => {
                                      handleEdit(payment);
                                      setShowDeleteConfirm(null);
                                    }}
                                  >
                                    Edit
                                  </button>
                                  <button
                                    className="flex-1 px-2 py-1 text-xs bg-red-50 text-red-600 hover:bg-red-100 rounded"
                                    onClick={() => handleDelete(payment.payment_id)}
                                    disabled={deletePaymentMutation.isLoading}
                                  >
                                    {deletePaymentMutation.isLoading ? 'Deleting...' : 'Delete'}
                                  </button>
                                </div>
                              </div>
                              <div className="p-2">
                                <button
                                  className="w-full px-2 py-1 text-xs text-gray-600 hover:bg-gray-50 rounded"
                                  onClick={() => setShowDeleteConfirm(null)}
                                >
                                  Cancel
                                </button>
                              </div>
                            </div>
                          )}
                        </div>
                      </td>
                    </tr>
                    {expandedPaymentId === payment.payment_id && payment.is_split_payment && (
                      <tr className={index % 2 === 0 ? 'bg-gray-50' : ''}>
                        <td className="px-2"></td>
                        <td colSpan="8" className="px-3 py-3">
                          <div className="bg-gray-100 p-3 rounded-md">
                            <h4 className="text-sm font-medium text-gray-700 mb-2">
                              Payment Distribution
                            </h4>
                            <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
                              {payment.periods?.map((period, i) => (
                                <div
                                  key={i}
                                  className="bg-white p-2 rounded border border-gray-200"
                                >
                                  <div className="text-xs text-gray-500">
                                    {period.period}
                                  </div>
                                  <div className="text-sm font-medium">
                                    {formatCurrency(period.amount)}
                                  </div>
                                </div>
                              ))}
                            </div>
                          </div>
                        </td>
                      </tr>
                    )}
                  </React.Fragment>
                ))}
              </tbody>
            </table>
          </div>
        )}
        {/* Pagination */}
        <div className="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200">
          <div className="flex-1 flex justify-between sm:hidden">
            <Button
              variant="secondary"
              onClick={() => setPage((p) => Math.max(p - 1, 1))}
              disabled={page === 1 || isLoading}
              size="sm"
            >
              Previous
            </Button>
            <Button
              variant="secondary"
              onClick={() => setPage((p) => p + 1)}
              disabled={payments.length < 10 || isLoading || isPreviousData}
              size="sm"
            >
              Next
            </Button>
          </div>
          <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
            <div>
              <p className="text-sm text-gray-700">
                Page <span className="font-medium">{page}</span>
              </p>
            </div>
            <div>
              <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px">
                <Button
                  variant="secondary"
                  onClick={() => setPage(1)}
                  disabled={page === 1 || isLoading}
                  className="relative inline-flex items-center px-2 py-2 rounded-l-md text-sm font-medium"
                >
                  &lt;&lt;
                </Button>
                <Button
                  variant="secondary"
                  onClick={() => setPage((p) => Math.max(p - 1, 1))}
                  disabled={page === 1 || isLoading}
                  className="relative inline-flex items-center px-2 py-2 text-sm font-medium"
                >
                  &lt;
                </Button>
                <span className="relative inline-flex items-center px-4 py-2 text-sm font-medium border border-gray-300 bg-white text-gray-700">
                  Page {page}
                </span>
                <Button
                  variant="secondary"
                  onClick={() => setPage((p) => p + 1)}
                  disabled={payments.length < 10 || isLoading || isPreviousData}
                  className="relative inline-flex items-center px-2 py-2 text-sm font-medium"
                >
                  &gt;
                </Button>
              </nav>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};
function formatAppliedPeriod(payment) {
  if (payment.applied_start_quarter) {
    return `Q${payment.applied_start_quarter} ${payment.applied_start_quarter_year}`;
  }
  if (payment.applied_start_month) {
    const monthNames = [
      'January', 'February', 'March', 'April', 'May', 'June',
      'July', 'August', 'September', 'October', 'November', 'December'
    ];
    const monthName = monthNames[payment.applied_start_month - 1];
    return `${monthName} ${payment.applied_start_month_year}`;
  }
  return 'N/A';
}
export default PaymentHistory;
```

src\components\payment\PaymentInfoCard.jsx
```jsx
import React from 'react';
import Card from '../ui/Card';
import { formatCurrency } from '../../lib/feeUtils';
import { formatDate, getNextPaymentDate } from '../../lib/dateUtils';
const PaymentInfoCard = ({ client, contract, metrics, isLoading }) => {
  if (isLoading) {
    return (
      <Card title="Payment Information">
        <div className="animate-pulse">
          <div className="grid grid-cols-1 gap-2">
            {[1, 2, 3, 4, 5].map((i) => (
              <div key={i} className="flex justify-between py-1">
                <div className="h-4 bg-gray-200 rounded w-1/3"></div>
                <div className="h-4 bg-gray-200 rounded w-1/3"></div>
              </div>
            ))}
          </div>
        </div>
      </Card>
    );
  }
  const calculateExpectedFee = () => {
    if (!contract) return 'N/A';
    if (contract.fee_type === 'flat') {
      return formatCurrency(contract.flat_rate);
    }
    if (metrics?.last_recorded_assets && contract.percent_rate) {
      return formatCurrency(metrics.last_recorded_assets * contract.percent_rate);
    }
    if (metrics?.last_payment_amount) {
      return formatCurrency(metrics.last_payment_amount);
    }
    return 'N/A';
  };
  const nextPaymentDate = contract && metrics?.last_payment_date
    ? formatDate(getNextPaymentDate(metrics.last_payment_date, contract.payment_schedule))
    : 'N/A';
  const details = [
    {
      label: 'AUM',
      value: metrics?.last_recorded_assets 
        ? formatCurrency(metrics.last_recorded_assets) 
        : 'No AUM data available',
    },
    {
      label: 'Expected Fee',
      value: calculateExpectedFee(),
    },
    {
      label: 'Last Payment',
      value: metrics?.last_payment_date ? formatDate(metrics.last_payment_date) : 'N/A',
    },
    {
      label: 'Last Payment Amount',
      value: metrics?.last_payment_amount ? formatCurrency(metrics.last_payment_amount) : 'N/A',
    },
    {
      label: 'Next Payment Due',
      value: nextPaymentDate,
    },
  ];
  return (
    <Card>
      <div className="pb-2">
        <h3 className="text-sm font-bold text-gray-800">Payment Information</h3>
      </div>
      <dl className="grid grid-cols-1 gap-1 text-sm">
        {details.map((item, idx) => (
          <div key={idx} className="flex justify-between py-1">
            <dt className="text-gray-500">{item.label}</dt>
            <dd className="font-medium text-gray-900">{item.value}</dd>
          </div>
        ))}
      </dl>
    </Card>
  );
};
export default PaymentInfoCard;
```

src\components\ui\Button.jsx
```jsx
import React from 'react';
const Button = ({ 
  children, 
  variant = 'primary', 
  size = 'md',
  className = '',
  ...props 
}) => {
  const variantStyles = {
    primary: 'bg-blue-600 text-white hover:bg-blue-700',
    secondary: 'border border-gray-200 text-gray-600 hover:bg-gray-50',
    danger: 'bg-red-600 text-white hover:bg-red-700',
  };
  const sizeStyles = {
    sm: 'px-3 py-1.5 text-sm',
    md: 'px-4 py-2',
    lg: 'px-6 py-3 text-lg',
  };
  return (
    <button
      className={`
        ${variantStyles[variant]} 
        ${sizeStyles[size]} 
        rounded-md font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500
        ${className}
      `}
      {...props}
    >
      {children}
    </button>
  );
};
export default Button;
```

src\components\ui\Card.jsx
```jsx
import React from 'react';
const Card = ({ 
  children, 
  title,
  className = '',
  titleClassName = '',
  bodyClassName = '',
  ...props 
}) => {
  return (
    <div className={`bg-white rounded-lg shadow ${className}`} {...props}>
      {title && (
        <div className={`px-4 py-2 border-b border-gray-200 ${titleClassName}`}>
          <h3 className="text-xl font-semibold text-gray-800">{title}</h3>
        </div>
      )}
      <div className={`p-4 ${bodyClassName}`}>{children}</div>
    </div>
  );
};
export default Card;
```

src\components\ui\DatePicker.jsx
```jsx
import React from 'react';
const DatePicker = ({
  label,
  value,
  onChange,
  placeholder = '',
  disabled = false,
  required = false,
  error = null,
}) => {
  return (
    <div className="space-y-1.5">
      {label && (
        <label className="text-sm font-medium flex items-center">
          {label}
          {required && <span className="text-red-500 ml-1">*</span>}
        </label>
      )}
      <div className="relative">
        <input
          type="date"
          value={value || ''}
          onChange={(e) => onChange(e.target.value)}
          placeholder={placeholder}
          disabled={disabled}
          className={`
            w-full h-10 pl-8 pr-3 border rounded-md
            ${error ? 'border-red-500' : 'border-gray-200'}
            ${disabled ? 'bg-gray-100 text-gray-500' : 'bg-white text-gray-900'}
            focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent
          `}
        />
        <div className="absolute left-3 top-1/2 transform -translate-y-1/2 pointer-events-none">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
            className="text-gray-400"
          >
            <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
            <line x1="16" y1="2" x2="16" y2="6"></line>
            <line x1="8" y1="2" x2="8" y2="6"></line>
            <line x1="3" y1="10" x2="21" y2="10"></line>
          </svg>
        </div>
      </div>
      {error && <p className="text-red-500 text-xs">{error}</p>}
    </div>
  );
};
export default DatePicker;
```

src\components\ui\Input.jsx
```jsx
import React from 'react';
const Input = ({
  label,
  type = 'text',
  value,
  onChange,
  placeholder = '',
  prefix = null,
  disabled = false,
  className = '',
  required = false,
  error = null,
}) => {
  return (
    <div className="space-y-1.5">
      {label && (
        <label className="text-sm font-medium flex items-center">
          {label}
          {required && <span className="text-red-500 ml-1">*</span>}
        </label>
      )}
      <div className="relative">
        {prefix && (
          <div className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500">
            {prefix}
          </div>
        )}
        <input
          type={type}
          value={value || ''}
          onChange={(e) => onChange(e.target.value)}
          placeholder={placeholder}
          disabled={disabled}
          className={`
            w-full h-10 rounded-md border
            ${error ? 'border-red-500' : 'border-gray-200'}
            ${prefix ? 'pl-8' : 'pl-3'}
            ${disabled ? 'bg-gray-100 text-gray-500' : 'bg-white text-gray-900'}
            focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent
            ${className}
          `}
        />
      </div>
      {error && <p className="text-red-500 text-xs">{error}</p>}
    </div>
  );
};
export default Input;
```

src\components\ui\Loader.jsx
```jsx
import React from 'react';
const Loader = ({ size = 'md', color = 'blue' }) => {
  const sizeClasses = {
    sm: 'h-4 w-4',
    md: 'h-6 w-6',
    lg: 'h-8 w-8',
    xl: 'h-12 w-12',
  };
  const colorClasses = {
    blue: 'text-blue-600',
    gray: 'text-gray-600',
    white: 'text-white',
  };
  return (
    <svg
      className={`animate-spin ${sizeClasses[size]} ${colorClasses[color]}`}
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
    >
      <circle
        className="opacity-25"
        cx="12"
        cy="12"
        r="10"
        stroke="currentColor"
        strokeWidth="4"
      ></circle>
      <path
        className="opacity-75"
        fill="currentColor"
        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
      ></path>
    </svg>
  );
};
export default Loader;
```

src\components\ui\Select.jsx
```jsx
import React from 'react';
const Select = ({
  label,
  options = [],
  value,
  onChange,
  placeholder = 'Select an option',
  disabled = false,
  required = false,
  error = null,
}) => {
  return (
    <div className="space-y-1.5">
      {label && (
        <label className="text-sm font-medium flex items-center">
          {label}
          {required && <span className="text-red-500 ml-1">*</span>}
        </label>
      )}
      <div className="relative">
        <select
          value={value || ''}
          onChange={(e) => onChange(e.target.value)}
          disabled={disabled}
          className={`
            w-full h-10 px-3 border rounded-md appearance-none
            ${error ? 'border-red-500' : 'border-gray-200'}
            ${disabled ? 'bg-gray-100 text-gray-500' : 'bg-white text-gray-900'}
            focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent
          `}
        >
          <option value="" disabled>
            {placeholder}
          </option>
          {options.map((option) => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>
        <div className="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
            className="text-gray-400"
          >
            <polyline points="6 9 12 15 18 9"></polyline>
          </svg>
        </div>
      </div>
      {error && <p className="text-red-500 text-xs">{error}</p>}
    </div>
  );
};
export default Select;
```

src\components\ui\StatusBadge.jsx
```jsx
import React from 'react';
const StatusBadge = ({ status, label, size = 'md' }) => {
  const colorVariants = {
    green: 'bg-green-100 text-green-800',
    yellow: 'bg-yellow-100 text-yellow-800',
    red: 'bg-red-100 text-red-800',
    blue: 'bg-blue-100 text-blue-800',
    gray: 'bg-gray-100 text-gray-800',
    exact: 'bg-blue-100 text-blue-800',
    acceptable: 'bg-green-100 text-green-800',
    warning: 'bg-yellow-100 text-yellow-800',
    alert: 'bg-red-100 text-red-800',
    unknown: 'bg-gray-100 text-gray-800',
  };
  const sizeClasses = {
    sm: 'px-1.5 py-0.5 text-xs',
    md: 'px-2 py-1 text-xs',
    lg: 'px-3 py-1.5 text-sm',
  };
  const colorClass = colorVariants[status] || colorVariants.gray;
  const sizeClass = sizeClasses[size] || sizeClasses.md;
  return (
    <span className={`inline-flex items-center font-medium rounded-full ${colorClass} ${sizeClass}`}>
      {label}
    </span>
  );
};
export default StatusBadge;
```

src\hooks\useClientData.js
```js
import { useQuery } from '@tanstack/react-query';
import api from '../lib/api';
import { queryKeys } from '../store/queries';
export const useClientList = (provider = null) => {
  return useQuery(
    queryKeys.clients.all,
    () => api.getClients(provider ? { provider } : undefined),
    {
      keepPreviousData: true,
    }
  );
};
export const useClient = (clientId) => {
  return useQuery(
    queryKeys.clients.detail(clientId),
    () => api.getClient(clientId),
    {
      enabled: !!clientId,
    }
  );
};
export const useClientContract = (clientId) => {
  return useQuery(
    queryKeys.clients.contract(clientId),
    () => api.getClientContract(clientId),
    {
      enabled: !!clientId,
    }
  );
};
export const useClientSummary = (clientId) => {
  return useQuery(
    queryKeys.clients.summary(clientId),
    () => api.getClientSummary(clientId),
    {
      enabled: !!clientId,
    }
  );
};
```

src\hooks\usePaymentData.js
```js
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import api from '../lib/api';
import { queryKeys } from '../store/queries';
export const usePaymentHistory = (clientId, options = {}) => {
  const { page = 1, limit = 10, year = null } = options;
  return useQuery(
    [...queryKeys.clients.payments(clientId), page, limit, year],
    () => api.getPayments(clientId, { page, limit, year }),
    {
      enabled: !!clientId,
      keepPreviousData: true,
    }
  );
};
export const usePayment = (paymentId) => {
  return useQuery(
    queryKeys.payments.detail(paymentId),
    () => api.getPayment(paymentId),
    {
      enabled: !!paymentId,
    }
  );
};
export const useAvailablePeriods = (contractId, clientId) => {
  return useQuery(
    ['periods', contractId, clientId],
    () => api.getAvailablePeriods(contractId, clientId),
    {
      enabled: !!contractId && !!clientId,
    }
  );
};
export const useCreatePayment = () => {
  const queryClient = useQueryClient();
  return useMutation(
    (paymentData) => api.createPayment(paymentData),
    {
      onSuccess: (data) => {
        queryClient.invalidateQueries(queryKeys.clients.payments(data.client_id));
        queryClient.invalidateQueries(queryKeys.clients.summary(data.client_id));
        queryClient.invalidateQueries(queryKeys.clients.detail(data.client_id));
      },
    }
  );
};
export const useUpdatePayment = () => {
  const queryClient = useQueryClient();
  return useMutation(
    ({ id, data }) => api.updatePayment(id, data),
    {
      onSuccess: (data) => {
        queryClient.invalidateQueries(queryKeys.payments.detail(data.payment_id));
        queryClient.invalidateQueries(queryKeys.clients.payments(data.client_id));
        queryClient.invalidateQueries(queryKeys.clients.summary(data.client_id));
        queryClient.invalidateQueries(queryKeys.clients.detail(data.client_id));
      },
    }
  );
};
export const useDeletePayment = () => {
  const queryClient = useQueryClient();
  return useMutation(
    ({ id, clientId }) => api.deletePayment(id).then(() => ({ id, clientId })),
    {
      onSuccess: ({ clientId }) => {
        queryClient.invalidateQueries(queryKeys.clients.payments(clientId));
        queryClient.invalidateQueries(queryKeys.clients.summary(clientId));
        queryClient.invalidateQueries(queryKeys.clients.detail(clientId));
      },
    }
  );
};
```

src\lib\api.js
```js
const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';
async function checkApiHealth() {
  try {
    const response = await fetch(`${API_BASE_URL}/health`);
    return response.ok;
  } catch (error) {
    console.error('API health check failed:', error);
    return false;
  }
}
async function request(endpoint, options = {}) {
  const url = `${API_BASE_URL}${endpoint}`;
  const headers = {
    'Content-Type': 'application/json',
    ...options.headers,
  };
  const config = {
    ...options,
    headers,
  };
  try {
    const response = await fetch(url, config);
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      console.error('API error response:', errorData);
      throw new Error(errorData.detail || `API error: ${response.status} ${response.statusText}`);
    }
    if (response.status === 204) {
      return null;
    }
    return await response.json();
  } catch (error) {
    console.error('API request failed:', error, 'URL:', url);
    if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {
      throw new Error('Cannot connect to the server. Please make sure the backend is running.');
    }
    throw error;
  }
}
const api = {
  health: checkApiHealth,
  getClients: () => request('/clients'),
  getClient: (id) => request(`/clients/${id}`),
  getContract: (id) => request(`/contracts/${id}`),
  getClientContract: (clientId) => request(`/clients/${clientId}/contract`),
  getPayments: (clientId, params = {}) => {
    const queryString = new URLSearchParams(params).toString();
    return request(`/clients/${clientId}/payments?${queryString}`);
  },
  getPayment: (id) => request(`/payments/${id}`),
  createPayment: (data) => request('/payments', {
    method: 'POST',
    body: JSON.stringify(data),
  }),
  updatePayment: (id, data) => request(`/payments/${id}`, {
    method: 'PUT',
    body: JSON.stringify(data),
  }),
  deletePayment: (id) => request(`/payments/${id}`, {
    method: 'DELETE',
  }),
  getAvailablePeriods: (contractId, clientId) => 
    request(`/contracts/${contractId}/periods?client_id=${clientId}`),
  getClientSummary: (clientId) => request(`/clients/${clientId}/summary`),
};
export default api;
```

src\lib\dateUtils.js
```js
import { format, parseISO, addMonths } from 'date-fns';
export const formatDate = (dateString) => {
  if (!dateString) return 'N/A';
  try {
    const date = parseISO(dateString);
    return format(date, 'MMM d, yyyy');
  } catch (error) {
    return dateString;
  }
};
export const getNextPaymentDate = (lastPaymentDate, schedule) => {
  if (!lastPaymentDate) return null;
  try {
    const date = parseISO(lastPaymentDate);
    const months = schedule.toLowerCase() === 'monthly' ? 1 : 3;
    return addMonths(date, months);
  } catch (error) {
    return null;
  }
};
export const getDaysSincePayment = (lastPaymentDate) => {
  if (!lastPaymentDate) return null;
  try {
    const date = parseISO(lastPaymentDate);
    const now = new Date();
    const diffTime = Math.abs(now - date);
    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  } catch (error) {
    return null;
  }
};
export const getQuarterFromMonth = (month) => {
  return Math.ceil(month / 3);
};
export const formatQuarter = (quarter, year) => {
  return `Q${quarter} ${year}`;
};
```

src\lib\feeUtils.js
```js
export const calculateExpectedFee = (contract, totalAssets) => {
    if (!contract) {
      return {
        fee: null,
        method: 'No contract data',
      };
    }
    if (contract.fee_type === 'flat') {
      return {
        fee: contract.flat_rate,
        method: 'Flat fee',
      };
    }
    if (contract.fee_type === 'percentage' || contract.fee_type === 'percent') {
      if (!totalAssets || !contract.percent_rate) {
        return {
          fee: null,
          method: 'Percentage fee (missing data)',
        };
      }
      const fee = totalAssets * contract.percent_rate;
      const ratePercentage = (contract.percent_rate * 100).toFixed(4);
      return {
        fee,
        method: `${ratePercentage}% of $${formatCurrency(totalAssets)}`,
      };
    }
    return {
      fee: null,
      method: 'Unknown fee type',
    };
  };
  export const formatCurrency = (value) => {
    if (value === null || value === undefined) return 'N/A';
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 2,
      maximumFractionDigits: 2,
    }).format(value);
  };
  export const formatPercentage = (value) => {
    if (value === null || value === undefined) return 'N/A';
    return new Intl.NumberFormat('en-US', {
      style: 'percent',
      minimumFractionDigits: 2,
      maximumFractionDigits: 2,
    }).format(value / 100);
  };
  export const generateFeeReferences = (contract) => {
    if (!contract) return null;
    let monthlyRate, quarterlyRate, annualRate;
    if (contract.fee_type === 'flat') {
      if (contract.payment_schedule === 'monthly') {
        monthlyRate = contract.flat_rate;
        quarterlyRate = monthlyRate * 3;
        annualRate = monthlyRate * 12;
      } else {
        quarterlyRate = contract.flat_rate;
        monthlyRate = quarterlyRate / 3;
        annualRate = quarterlyRate * 4;
      }
    } else if (contract.percent_rate) {
      monthlyRate = contract.payment_schedule === 'monthly' 
        ? contract.percent_rate 
        : contract.percent_rate / 3;
      quarterlyRate = contract.payment_schedule === 'monthly'
        ? contract.percent_rate * 3
        : contract.percent_rate;
      annualRate = contract.payment_schedule === 'monthly'
        ? contract.percent_rate * 12
        : contract.percent_rate * 4;
    } else {
      return null;
    }
    return {
      monthly: contract.fee_type === 'flat' ? formatCurrency(monthlyRate) : (monthlyRate * 100).toFixed(4) + '%',
      quarterly: contract.fee_type === 'flat' ? formatCurrency(quarterlyRate) : (quarterlyRate * 100).toFixed(4) + '%',
      annual: contract.fee_type === 'flat' ? formatCurrency(annualRate) : (annualRate * 100).toFixed(4) + '%',
    };
  };
```

src\pages\_app.js
```js
import { QueryClientProvider } from '@tanstack/react-query';
import { ReactQueryDevtools } from '@tanstack/react-query-devtools';
import { queryClient } from '../store/queries';
import '../styles/globals.css';
function MyApp({ Component, pageProps }) {
  return (
    <QueryClientProvider client={queryClient}>
      <Component {...pageProps} />
      {process.env.NODE_ENV === 'development' && <ReactQueryDevtools initialIsOpen={false} />}
    </QueryClientProvider>
  );
}
export default MyApp;
```

src\pages\contacts.js
```js
import React from 'react';
import PageLayout from '../components/layout/PageLayout';
import Card from '../components/ui/Card';
const ContactsPage = () => {
  return (
    <PageLayout>
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-2xl font-bold text-gray-800">Contacts</h1>
      </div>
      <Card className="text-center py-12">
        <div className="max-w-md mx-auto">
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            className="h-12 w-12 mx-auto text-gray-400 mb-4" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor"
          >
            <path 
              strokeLinecap="round" 
              strokeLinejoin="round" 
              strokeWidth={2} 
              d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" 
            />
          </svg>
          <h2 className="text-xl font-semibold text-gray-700 mb-2">
            Page Under Construction
          </h2>
          <p className="text-gray-500 mb-6">
            The Contacts page is currently being developed. Please check back later.
          </p>
        </div>
      </Card>
    </PageLayout>
  );
};
export default ContactsPage;
```

src\pages\contracts.js
```js
import React from 'react';
import PageLayout from '../components/layout/PageLayout';
import Card from '../components/ui/Card';
const ContractsPage = () => {
  return (
    <PageLayout>
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-2xl font-bold text-gray-800">Contracts</h1>
      </div>
      <Card className="text-center py-12">
        <div className="max-w-md mx-auto">
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            className="h-12 w-12 mx-auto text-gray-400 mb-4" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor"
          >
            <path 
              strokeLinecap="round" 
              strokeLinejoin="round" 
              strokeWidth={2} 
              d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" 
            />
          </svg>
          <h2 className="text-xl font-semibold text-gray-700 mb-2">
            Page Under Construction
          </h2>
          <p className="text-gray-500 mb-6">
            The Contracts page is currently being developed. Please check back later.
          </p>
        </div>
      </Card>
    </PageLayout>
  );
};
export default ContractsPage;
```

src\pages\export.js
```js
import React from 'react';
import PageLayout from '../components/layout/PageLayout';
import Card from '../components/ui/Card';
const ExportPage = () => {
  return (
    <PageLayout>
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-2xl font-bold text-gray-800">Export Data</h1>
      </div>
      <Card className="text-center py-12">
        <div className="max-w-md mx-auto">
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            className="h-12 w-12 mx-auto text-gray-400 mb-4" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor"
          >
            <path 
              strokeLinecap="round" 
              strokeLinejoin="round" 
              strokeWidth={2} 
              d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" 
            />
          </svg>
          <h2 className="text-xl font-semibold text-gray-700 mb-2">
            Page Under Construction
          </h2>
          <p className="text-gray-500 mb-6">
            The Export Data page is currently being developed. Please check back later.
          </p>
        </div>
      </Card>
    </PageLayout>
  );
};
export default ExportPage;
```

src\pages\index.js
```js
import { useEffect } from 'react';
import { useRouter } from 'next/router';
export default function Home() {
  const router = useRouter();
  useEffect(() => {
    router.push('/payments');
  }, [router]);
  return null;
}
```

src\pages\payments.js
```js
import React, { useEffect, useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import PageLayout from '../components/layout/PageLayout';
import ClientDashboard from '../components/payment/ClientDashboard';
import PaymentForm from '../components/payment/PaymentForm';
import PaymentHistory from '../components/payment/PaymentHistory';
import api from '../lib/api';
import useStore from '../store';
const PaymentsPage = () => {
  const { selectedClientId, setSelectedClientId, documentViewerOpen, setDocumentViewerOpen } = useStore();
  const [apiHealthy, setApiHealthy] = useState(true);
  useEffect(() => {
    const checkHealth = async () => {
      const isHealthy = await api.health();
      setApiHealthy(isHealthy);
    };
    checkHealth();
  }, []);
  const { 
    data: clients = [], 
    isLoading,
    error,
  } = useQuery(['clients'], () => api.getClients(), {
    enabled: apiHealthy, 
    retry: 2,
    onError: () => setApiHealthy(false)
  });
  useEffect(() => {
    if (!selectedClientId && clients.length > 0) {
      setSelectedClientId(clients[0].client_id);
    }
  }, [clients, selectedClientId, setSelectedClientId]);
  const toggleDocumentViewer = () => {
    setDocumentViewerOpen(!documentViewerOpen);
  };
  const renderContent = () => {
    if (!apiHealthy) {
      return (
        <div className="bg-red-50 border border-red-200 text-red-700 px-6 py-4 rounded-md">
          <h3 className="text-lg font-medium mb-2">Cannot Connect to Server</h3>
          <p className="mb-4">Unable to establish connection with the backend server. Please make sure the backend is running.</p>
          <button 
            className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700"
            onClick={async () => {
              const isHealthy = await api.health();
              setApiHealthy(isHealthy);
            }}
          >
            Retry Connection
          </button>
        </div>
      );
    }
    if (error) {
      return (
        <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
          Error loading clients: {error.message}
        </div>
      );
    }
    if (!selectedClientId) {
      return (
        <div className="bg-white p-6 rounded-lg shadow-sm">
          <p className="text-center text-gray-500">
            {clients.length > 0 
              ? 'Select a client from the sidebar to view payment information.'
              : 'No clients available. Please add clients to the system.'}
          </p>
        </div>
      );
    }
    const client = clients.find(c => c.client_id === selectedClientId);
    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between mb-6">
          <h1 className="text-2xl font-bold text-gray-800">
            {isLoading ? 'Loading...' : client?.display_name || 'Client Company Name'}
          </h1>
          <button 
            className="flex items-center gap-2 px-4 py-2 border border-gray-200 rounded-md"
            onClick={toggleDocumentViewer}
          >
            <svg 
              xmlns="http://www.w3.org/2000/svg" 
              width="16" 
              height="16" 
              viewBox="0 0 24 24" 
              fill="none" 
              stroke="currentColor" 
              strokeWidth="2" 
              strokeLinecap="round" 
              strokeLinejoin="round"
            >
              <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
              <polyline points="14 2 14 8 20 8"></polyline>
              <line x1="16" y1="13" x2="8" y2="13"></line>
              <line x1="16" y1="17" x2="8" y2="17"></line>
              <polyline points="10 9 9 9 8 9"></polyline>
            </svg>
            {documentViewerOpen ? "Hide Documents" : "View Documents"}
          </button>
        </div>
        <ClientDashboard clientId={selectedClientId} />
        <PaymentForm clientId={selectedClientId} />
        <PaymentHistory clientId={selectedClientId} />
      </div>
    );
  };
  return (
    <PageLayout clients={clients} isLoading={isLoading}>
      {renderContent()}
    </PageLayout>
  );
};
export default PaymentsPage;
```

src\pages\summary.js
```js
import React from 'react';
import PageLayout from '../components/layout/PageLayout';
import Card from '../components/ui/Card';
const SummaryPage = () => {
  return (
    <PageLayout>
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-2xl font-bold text-gray-800">Summary</h1>
      </div>
      <Card className="text-center py-12">
        <div className="max-w-md mx-auto">
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            className="h-12 w-12 mx-auto text-gray-400 mb-4" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor"
          >
            <path 
              strokeLinecap="round" 
              strokeLinejoin="round" 
              strokeWidth={2} 
              d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" 
            />
          </svg>
          <h2 className="text-xl font-semibold text-gray-700 mb-2">
            Page Under Construction
          </h2>
          <p className="text-gray-500 mb-6">
            The Summary page is currently being developed. Please check back later.
          </p>
        </div>
      </Card>
    </PageLayout>
  );
};
export default SummaryPage;
```

src\store\index.js
```js
import { create } from 'zustand';
const useStore = create((set) => ({
  selectedClientId: null,
  setSelectedClientId: (clientId) => set({ selectedClientId: clientId }),
  documentViewerOpen: false,
  setDocumentViewerOpen: (isOpen) => set({ documentViewerOpen: isOpen }),
  selectedDocumentUrl: null,
  setSelectedDocumentUrl: (url) => set({ selectedDocumentUrl: url }),
  editingPayment: null,
  setEditingPayment: (payment) => set({ editingPayment: payment }),
  clearEditingPayment: () => set({ editingPayment: null }),
  isMobileMenuOpen: false,
  setMobileMenuOpen: (isOpen) => set({ isMobileMenuOpen: isOpen }),
}));
export default useStore;
```

src\store\queries.js
```js
import { 
    QueryClient,
  } from '@tanstack/react-query';
  export const queryClient = new QueryClient({
    defaultOptions: {
      queries: {
        refetchOnWindowFocus: false,
        staleTime: 5 * 60 * 1000,
        retry: 1,
      },
    },
  });
  export const queryKeys = {
    clients: {
      all: ['clients'],
      detail: (id) => ['clients', id],
      contract: (id) => ['clients', id, 'contract'],
      payments: (id) => ['clients', id, 'payments'],
      summary: (id) => ['clients', id, 'summary'],
    },
    payments: {
      all: ['payments'],
      detail: (id) => ['payments', id],
    },
    contracts: {
      all: ['contracts'],
      detail: (id) => ['contracts', id],
    },
  };
```

src\styles\globals.css
```css
@tailwind base;
@tailwind components;
@tailwind utilities;
html,
body {
  padding: 0;
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,
    Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;
}
* {
  box-sizing: border-box;
}
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}
::-webkit-scrollbar-track {
  background: #f1f1f1;
}
::-webkit-scrollbar-thumb {
  background: #c5c5c5;
  border-radius: 4px;
}
::-webkit-scrollbar-thumb:hover {
  background: #a8a8a8;
}
```

tailwind.config.js
```js
/** @type {import('tailwindcss').Config} */
module.exports = {
    content: [
      "./src/pages/**/*.{js,ts,jsx,tsx}",
      "./src/components/**/*.{js,ts,jsx,tsx}",
    ],
    theme: {
      extend: {},
    },
    plugins: [],
  };
```